name: Build

on:
  - push
  - workflow_dispatch

env:
  BUILD_CONFIGURATION: Release

jobs:
  Windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v3

    - name: Get current date
      id: date
      run: echo "::set-output name=CurrentDate::$(date +'%Y-%m-%d')"

    - name: Get commit hash
      id: vars
      run: echo "::set-output name=ShortHash::$(git rev-parse --short=7 HEAD)"

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1.3

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        nuget restore "Cavern.sln"
        nuget restore "Cavern.Format/Cavern.Format.csproj"
        nuget restore "CavernSamples/CavernSamples.sln"

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{ matrix.arch }} "Cavern.sln"
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{ matrix.arch }} "CavernSamples/CavernSamples.sln"

    - name: Build CavernizeCLI
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        dotnet publish "CavernSamples/CavernizeCLI/CavernizeCLI.csproj" --configuration ${{env.BUILD_CONFIGURATION}} --runtime win-${{ matrix.arch }} --self-contained true -p:PublishSingleFile=true

    - name: Run tests
      continue-on-error: true
      run: |
        dotnet test Tests/Test.Cavern/Test.Cavern.csproj --no-build --configuration Release --verbosity normal
        dotnet test Tests/Test.Cavern.Format/Test.Cavern.Format.csproj --no-build --configuration Release --verbosity normal
        dotnet test Tests/Test.Cavern.QuickEQ/Test.Cavern.QuickEQ.csproj --no-build --configuration Release --verbosity normal

    - name: Download base build
      shell: powershell
      run: |
        Invoke-WebRequest -Method Get -Uri "https://cavern.sbence.hu/content/downloads/cavern64.zip" -OutFile cavern64.zip -UseBasicParsing
        mkdir build/Release
        7z x -obuild/Release cavern64.zip
        Remove-Item -Path "cavern64.zip"

    - name: Collect artifacts
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        New-Item -ItemType Directory -Path "build/Release/win-${{ matrix.arch }}" -Force
        copy "Cavern.QuickEQ/bin/Release/netstandard2.1/Cavern.dll" "build/Release/win-${{ matrix.arch }}/Cavern.dll"
        copy "Cavern.QuickEQ/bin/Release/netstandard2.1/Cavern.QuickEQ.dll" "build/Release/win-${{ matrix.arch }}/Cavern.QuickEQ.dll"
        copy "Cavern.Format/bin/Release/netstandard2.1/Cavern.Format.dll" "build/Release/win-${{ matrix.arch }}/Cavern.Format.dll"
        copy "Cavern.QuickEQ.Format/bin/Release/netstandard2.1/Cavern.QuickEQ.Format.dll" "build/Release/win-${{ matrix.arch }}/Cavern.QuickEQ.Format.dll"
        New-Item -ItemType Directory -Path "build/Release/win-${{ matrix.arch }}/Tools/CavernizeCLI" -Force
        New-Item -ItemType Directory -Path "build/Release/win-${{ matrix.arch }}/Tools/CavernizeGUI" -Force
        Copy-Item -Path "CavernSamples/CavernizeCLI/bin/Release/net8.0/win-${{ matrix.arch }}/publish/*" -Destination "build/Release/win-${{ matrix.arch }}/Tools/CavernizeCLI/" -Recurse
        Copy-Item -Path "CavernSamples/CavernizeGUI/bin/Release/net8.0-windows/*" -Destination "build/Release/win-${{ matrix.arch }}/Tools/CavernizeGUI/" -Recurse

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "Cavern-Win-${{ matrix.arch }}_${{steps.date.outputs.CurrentDate}}@${{steps.vars.outputs.ShortHash}}"
        path: "build/Release/win-${{ matrix.arch }}/"

    - name: Compress artifacts
      uses: vimtor/action-zip@v1
      with:
        files: "build/Release/win-${{ matrix.arch }}/"
        dest: "build/Cavern-Win-${{ matrix.arch }}.zip"

    - name: Upload Windows artifact for release
      uses: actions/upload-artifact@v4
      with:
        name: "windows-${{ matrix.arch }}-zip"
        path: "build/Cavern-Win-${{ matrix.arch }}.zip"

  macOS:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
    - uses: actions/checkout@v3

    - name: Get current date
      id: date
      run: echo "CurrentDate=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Get commit hash
      id: vars
      run: echo "ShortHash=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Cavern.sln

    - name: Build
      run: dotnet build Cavern.sln --configuration ${{env.BUILD_CONFIGURATION}} --no-restore

    - name: Build CavernizeCLI
      run: dotnet publish CavernSamples/CavernizeCLI/CavernizeCLI.csproj --configuration ${{env.BUILD_CONFIGURATION}} --runtime osx-${{ matrix.arch }} --self-contained true -p:PublishSingleFile=true

    - name: Run tests
      continue-on-error: true
      run: |
        dotnet test Tests/Test.Cavern/Test.Cavern.csproj --no-build --configuration Release --verbosity normal
        dotnet test Tests/Test.Cavern.Format/Test.Cavern.Format.csproj --no-build --configuration Release --verbosity normal
        dotnet test Tests/Test.Cavern.QuickEQ/Test.Cavern.QuickEQ.csproj --no-build --configuration Release --verbosity normal

    - name: Collect artifacts
      run: |
        mkdir -p build/Release/osx-${{ matrix.arch }}
        cp Cavern/bin/Release/netstandard2.1/Cavern.dll build/Release/osx-${{ matrix.arch }}/
        cp Cavern.QuickEQ/bin/Release/netstandard2.1/Cavern.QuickEQ.dll build/Release/osx-${{ matrix.arch }}/
        cp Cavern.Format/bin/Release/netstandard2.1/Cavern.Format.dll build/Release/osx-${{ matrix.arch }}/
        cp Cavern.QuickEQ.Format/bin/Release/netstandard2.1/Cavern.QuickEQ.Format.dll build/Release/osx-${{ matrix.arch }}/
        mkdir -p build/Release/osx-${{ matrix.arch }}/Tools
        cp -r CavernSamples/CavernizeCLI/bin/Release/net8.0/osx-${{ matrix.arch }}/publish build/Release/osx-${{ matrix.arch }}/Tools/CavernizeCLI/

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "Cavern-macOS-${{ matrix.arch }}_${{steps.date.outputs.CurrentDate}}@${{steps.vars.outputs.ShortHash}}"
        path: "build/Release/osx-${{ matrix.arch }}/"

    - name: Compress artifacts
      run: |
        cd build/Release
        zip -r ../Cavern-macOS-${{ matrix.arch }}.zip osx-${{ matrix.arch }}/

    - name: Upload macOS artifact for release
      uses: actions/upload-artifact@v4
      with:
        name: "macos-${{ matrix.arch }}-zip"
        path: "build/Cavern-macOS-${{ matrix.arch }}.zip"

  Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
        libc: [glibc, musl]

    steps:
    - uses: actions/checkout@v3

    - name: Get current date
      id: date
      run: echo "CurrentDate=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Get commit hash
      id: vars
      run: echo "ShortHash=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Cavern.sln

    - name: Build
      run: dotnet build Cavern.sln --configuration ${{env.BUILD_CONFIGURATION}} --no-restore

    - name: Build CavernizeCLI
      run: dotnet publish CavernSamples/CavernizeCLI/CavernizeCLI.csproj --configuration ${{env.BUILD_CONFIGURATION}} --runtime linux-${{ matrix.libc }}-${{ matrix.arch }} --self-contained true -p:PublishSingleFile=true

    - name: Run tests
      continue-on-error: true
      run: |
        dotnet test Tests/Test.Cavern/Test.Cavern.csproj --no-build --configuration Release --verbosity normal
        dotnet test Tests/Test.Cavern.Format/Test.Cavern.Format.csproj --no-build --configuration Release --verbosity normal
        dotnet test Tests/Test.Cavern.QuickEQ/Test.Cavern.QuickEQ.csproj --no-build --configuration Release --verbosity normal

    - name: Collect artifacts
      run: |
        mkdir -p build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}
        cp Cavern/bin/Release/netstandard2.1/Cavern.dll build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/
        cp Cavern.QuickEQ/bin/Release/netstandard2.1/Cavern.QuickEQ.dll build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/
        cp Cavern.Format/bin/Release/netstandard2.1/Cavern.Format.dll build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/
        cp Cavern.QuickEQ.Format/bin/Release/netstandard2.1/Cavern.QuickEQ.Format.dll build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/
        mkdir -p build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/Tools/CavernizeCLI
        cp -r CavernSamples/CavernizeCLI/bin/Release/net8.0/linux-${{ matrix.libc }}-${{ matrix.arch }}/publish/* build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/Tools/CavernizeCLI/

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "Cavern-Linux-${{ matrix.libc }}-${{ matrix.arch }}_${{steps.date.outputs.CurrentDate}}@${{steps.vars.outputs.ShortHash}}"
        path: "build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/"

    - name: Compress artifacts
      uses: vimtor/action-zip@v1
      with:
        files: "build/Release/linux-${{ matrix.libc }}-${{ matrix.arch }}/"
        dest: "build/Cavern-Linux-${{ matrix.libc }}-${{ matrix.arch }}.zip"

    - name: Upload Linux artifact for release
      uses: actions/upload-artifact@v4
      with:
        name: "linux-${{ matrix.libc }}-${{ matrix.arch }}-zip"
        path: "build/Cavern-Linux-${{ matrix.libc }}-${{ matrix.arch }}.zip"

  release:
    needs: [Windows, macOS, Linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v3

    - name: Get current date
      id: date
      run: echo "CurrentDate=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Get commit hash
      id: vars
      run: echo "ShortHash=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

    - name: Download Windows x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "windows-x64-zip"
        path: "artifacts/"

    - name: Download Windows arm64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "windows-arm64-zip"
        path: "artifacts/"

    - name: Download macOS x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "macos-x64-zip"
        path: "artifacts/"

    - name: Download macOS arm64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "macos-arm64-zip"
        path: "artifacts/"

    - name: Download Linux glibc x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "linux-glibc-x64-zip"
        path: "artifacts/"

    - name: Download Linux glibc arm64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "linux-glibc-arm64-zip"
        path: "artifacts/"

    - name: Download Linux musl x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "linux-musl-x64-zip"
        path: "artifacts/"

    - name: Download Linux musl arm64 artifact
      uses: actions/download-artifact@v4
      with:
        name: "linux-musl-arm64-zip"
        path: "artifacts/"

    - name: GitHub pre-release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{secrets.GITHUB_TOKEN}}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Cavern @${{steps.vars.outputs.ShortHash}}[${{steps.date.outputs.CurrentDate}}] - Multi-Architecture"
        files: "artifacts/*.zip"
